let self,store;class OptionsGetter{constructor(t){store=t,self=this}getter(t){let e=self.getRequiredParam(t.params);new Promise((function(o){self.updateOptionsStatus(e,"awaiting"),fetch(self.getEndpointURL(t.type,t.params),{method:"get",headers:{"Content-Type":"application/json","X-WP-Nonce":window.tablesome_ajax_object.rest_nonce}}).then((function(t){return t.json()})).then((function(t){return t})).then((function(t){"success"==t.status&&t.data.length>0&&(self.updateOptionsStatus(e,"success"),o(t.data))})).catch((function(t){self.updateOptionsStatus(e,"fail")}))})).then((function(e){t.params.post_id&&(e=self.attachIntegrationAndPostIdPropertyToOption(e,t.params)),store.workflow.update((o=>(o.options[t.type]=[...o.options[t.type],...e],o)))}))}getEndpointURL(t,e){let o=self.getEndpoint(t),s=window.tablesome_ajax_object.api_endpoints[o],n=new URL(s);for(let[t,o]of Object.entries(e))"post_id"==t&&(t="id"),n.searchParams.append(t,o);return n}getEndpoint(t){return{posts:"workflow_posts",fields:"workflow_fields",terms:"workflow_terms",taxonomies:"workflow_taxonomies",post_types:"workflow_post_types",user_roles:"workflow_user_roles",users:"workflow_users"}[t]}attachIntegrationAndPostIdPropertyToOption(t,e){return t.map((t=>(t.integration_and_post_id=self.getRequiredParam(e),t)))}getRequiredParam(t){let e=t.integration_type;return t.post_id?e=t.integration_type+"_"+t.post_id:t.post_type?e=t.post_type:t.get_post_types?e=t.get_post_types:t.get_user_roles?e=t.get_user_roles:t.get_users&&(e=t.get_users),e}updateOptionsStatus(t,e){store.workflow.update((o=>(o.optionsStatus[t]=e,o)))}}export default OptionsGetter;